<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Random IT Notes]]></title>
  <link href="http://GR360RY.github.io/atom.xml" rel="self"/>
  <link href="http://GR360RY.github.io/"/>
  <updated>2013-12-01T19:56:33+02:00</updated>
  <id>http://GR360RY.github.io/</id>
  <author>
    <name><![CDATA[Gregory Shulov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building Custom CentOS 6.4 LiveCD with Ansible]]></title>
    <link href="http://GR360RY.github.io/blog/2013/12/01/building-custom-centos-6-dot-4-livecd-with-ansible/"/>
    <updated>2013-12-01T01:23:00+02:00</updated>
    <id>http://GR360RY.github.io/blog/2013/12/01/building-custom-centos-6-dot-4-livecd-with-ansible</id>
    <content type="html"><![CDATA[<h2>Preface</h2>

<p>LiveCDs can be a big help when you need to do a task that cannot be executed from within OS for some reason.
Resizing partitions, changing passwords and firmware updates &ndash; is just the beginning of the list.
It is especially welcome when your machine cannot boot from network ( PXE ).</p>

<p>There are lot of very good options like Knoppix, Parted Magic or LiveCDs of popular distributions.
But there are cases when you need custom LiveCD with your scripts, packages and preinstalled software.
Ability to modify root partition using writable snapshot on livecd, allows you to add software and modify configuration
on the fly.</p>

<!-- more -->


<p>LiveCD can be easily flashed to usb or converted to pxe images. Hence, there are plenty of ways to get into your custom livecd.
Booting LiveCD from network can be a great way to bootstrap your hardware before os installation.</p>

<p>The standard procedure of LiveCD creation requires livecd-tools package together with kickstart file that defines packages list
and post installation instructions. All postinstall is done using shell scripts which is far from ideal. Tools like Ansible
are better suitable for doing exactly that. Defining system state with DSL language is much cleaner and easily maintanable.</p>

<p>In the next guide I will show how to create your own custom Centos 6.4 LiveCD using step by step instructions.</p>

<h2>Installing Requirements</h2>

<ol>
<li>CentOS 6.X machine.</li>
<li>livecd-tools, git, python-argparse and ansible &ndash; all packages available in EPEL repository.</li>
</ol>


<p>Install EPEL repository if not already installed:</p>

<pre><code># yum -y install http://ftp.nluug.nl/pub/os/Linux/distr/fedora-epel/6/i386/epel-release-6-8.noarch.rpm
</code></pre>

<p>Install required packages:</p>

<pre><code># yum -y install livecd-tools git ansible python-argparse
</code></pre>

<p>Clone livecd-ansible repository:</p>

<pre><code>$ git clone https://github.com/GR360RY/livecd-ansible.git
</code></pre>

<h2>Building LiveCD the old way</h2>

<p>Let start from getting basic livecd configuration kickstart file for CentOS created by Fabian Arrotin (arrfab):</p>

<pre><code>wget http://people.centos.org/arrfab/CentOS6/LiveCD-DVD/centos6-liveCD-desktop.cfg
</code></pre>

<p><code>livecd-creator</code> tool from livecd-tools package is used to create custom livecd.</p>

<p>The example follows:</p>

<pre><code># livecd-creator -c centos6-liveCD-desktop.cfg -f centos6-desktop
</code></pre>

<p>This will create <code>centos6-desktop.iso</code> as defined in centos6-liveCD-desktop.cfg.
The file has standard kickstart format and contains two main parts:</p>

<h4>Services configuration and packages selection:</h4>

<p>This part is straightforward. Language, Keyboard and Services are self explanatory.
The same goes for package list &ndash; contains yum groups and individual packages.</p>

<figure class='code'><figcaption><span>centos6-liveCD-desktop.cfg </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lang en_US.UTF-8
</span><span class='line'>keyboard us
</span><span class='line'>timezone US/Eastern
</span><span class='line'>auth --useshadow --enablemd5
</span><span class='line'>selinux --enforcing
</span><span class='line'>firewall --enabled --service<span class="o">=</span>mdns
</span><span class='line'>repo --name<span class="o">=</span>base    --baseurl<span class="o">=</span>file://REPOPATH
</span><span class='line'>
</span><span class='line'>xconfig --startxonboot
</span><span class='line'>part / --size 4096 --fstype ext4
</span><span class='line'>services --enabled<span class="o">=</span>NetworkManager --disabled<span class="o">=</span>network,sshd
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>%packages
</span><span class='line'>syslinux
</span><span class='line'>kernel
</span><span class='line'>@base
</span><span class='line'>@core
</span><span class='line'>@basic-desktop
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<h4>Postinstallation stage:</h4>

<p>Here the real mess is starting. Triple variable escaping is a pain:</p>

<pre><code>%post

## default LiveCD user
LIVECD_USER="centoslive"

########################################################################
# Create a sub-script so the output can be captured
# Must change "$" to "\$" and "`" to "\`" to avoid shell quoting
########################################################################
cat &gt; /root/post-install &lt;&lt; EOF_post
#!/bin/bash

echo ###################################################################
echo ## Creating the livesys init script
echo ###################################################################
</code></pre>

<p>Here is an example code snipplet from centos6-liveCD-desktop.cfg</p>

<figure class='code'><figcaption><span>centos6-liveCD-desktop.cfg </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>%post
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>. /etc/init.d/functions
</span><span class='line'>
</span><span class='line'><span class="k">if</span> ! strstr <span class="s2">&quot;\\\`cat /proc/cmdline\\\`&quot;</span> liveimg <span class="o">||</span> <span class="o">[</span> <span class="s2">&quot;\\\$1&quot;</span> !<span class="o">=</span> <span class="s2">&quot;start&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nb">exit </span>0
</span><span class='line'>      <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">      if</span> <span class="o">[</span> -e /.liveimg-configured <span class="o">]</span> ; <span class="k">then</span>
</span><span class='line'><span class="k">            </span><span class="nv">configdone</span><span class="o">=</span>1
</span><span class='line'>            <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">            </span>exists<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                  which <span class="se">\\\$</span>1 &gt;/dev/null 2&gt;&amp;1 <span class="o">||</span> <span class="k">return</span>
</span><span class='line'>                      <span class="se">\\\$</span>*
</span><span class='line'>                      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>Maintaining your bash code is not convenient in such a way. The same goes for catching output or just plain debugging.
As as result adding your own software to the livecd becomes a laborious task ( in case you need more then just adding an individual package)</p>

<h2>Building LiveCD with Ansible</h2>

<p>Taking into acount problems presented with the conventional way of creating LiveCD, Ansible was the obvious choise for the task.
Ansible supports &ldquo;chroot path&rdquo; as transport for playbooks which is ideal for Postinstallation Stage.</p>

<p>Before I get into the details let see how the new build procedure works.</p>

<pre><code>$ cd livecd-ansible
$ ./generate_config.py centos6-mini.yml
$ sudo -s
# livecd-creator -c centos6-mini.ks --cache=cache -f centos6-mini
</code></pre>

<p>This will create centos6-mini.iso with only the basic packages.</p>

<p>Before we used kickstart config file to &ldquo;define&rdquo; the livecd.
From now on we will use Ansible playbook for this purpose.</p>

<p>generate_config.py accepts playbook file as an argument and will generate kickstart config file.
All postinstallation steps will be done using Ansible.</p>

<p>Check out the Project Structure below:</p>

<figure class='code'><figcaption><span>Project Structure </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.
</span><span class='line'>├── roles                         <span class="c"># Ansible roles folder</span>
</span><span class='line'>│   ├── livecd-pre-common
</span><span class='line'>│   ├── centos-sshd-service       <span class="c"># sshd service role</span>
</span><span class='line'>│   ├── epel-repo                 <span class="c"># epel repo setup</span>
</span><span class='line'>│   ├── livecd-pxe-common
</span><span class='line'>│   ├── livecd-post-common
</span><span class='line'>│   └── livecd-isolinux-common
</span><span class='line'>├── templates
</span><span class='line'>│   └── centos6-mini.ks.j2        <span class="c"># Basic config template</span>
</span><span class='line'>├── centos6-mini.yml              <span class="c"># Ansible Playbook for %post stage</span>
</span><span class='line'>├── generate_config.py            <span class="c"># Config file Generator</span>
</span><span class='line'>├── README.md
</span><span class='line'>└── Vagrantfile
</span></code></pre></td></tr></table></div></figure>


<p>centos6-mini.yml will be used to generate config file and run postinstall:</p>

<figure class='code'><figcaption><span>centos-mini.yml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">post</span>
</span><span class='line'>  <span class="l-Scalar-Plain">connection</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">chroot</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sudo</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>  <span class="l-Scalar-Plain">gather_facts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">vars</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">cdlabel</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">centos6-mini</span>
</span><span class='line'>    <span class="l-Scalar-Plain">hostname</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">centos6-mini</span>
</span><span class='line'>    <span class="l-Scalar-Plain">livecd_user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">centos</span>
</span><span class='line'>    <span class="l-Scalar-Plain">root_password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">centos</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Not used directly in playbook. Used by generate_config.py to create basic kickstart file.</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">lang</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">en_US.UTF-8</span>
</span><span class='line'>    <span class="l-Scalar-Plain">keyboard</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">us</span>
</span><span class='line'>    <span class="l-Scalar-Plain">timezone</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Asia/Jerusalem</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">repos_list</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">name</span><span class="p-Indicator">:</span> <span class="s">&#39;a-base&#39;</span><span class="p-Indicator">,</span> <span class="nv">baseurl</span><span class="p-Indicator">:</span> <span class="s">&#39;http://mirror.isoc.org.il/pub/centos/6/os/$basearch&#39;</span> <span class="p-Indicator">}</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">name</span><span class="p-Indicator">:</span> <span class="s">&#39;a-updates&#39;</span><span class="p-Indicator">,</span> <span class="nv">baseurl</span><span class="p-Indicator">:</span> <span class="s">&#39;http://mirror.isoc.org.il/pub/centos/6/updates/$basearch&#39;</span> <span class="p-Indicator">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># End of variable block used by generate_config.py</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">roles</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">livecd-pre-common</span>
</span><span class='line'>    <span class="c1"># Add your ansible roles here</span>
</span><span class='line'>    <span class="c1"># - epel-repo</span>
</span><span class='line'>    <span class="c1"># - centos-sshd-service</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">livecd-pxe-common</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">livecd-post-common</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">post-nochroot</span>
</span><span class='line'>  <span class="l-Scalar-Plain">connection</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">local</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sudo</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>  <span class="l-Scalar-Plain">gather_facts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">roles</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">livecd-isolinux-common</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can copy or modify centos6-mini.yml to create your own livecd by adding your ansible roles below livecd-pre-common.
Update lang, keyboard, timezone and repos_list to match your location to reduce download times. If you move livecd-ansible folder to
a new location, rerun generate_config.py for every playbook file.</p>

<h2>Debugging your Ansible Playbooks</h2>

<p>livecd-creator has a hidden fiature &ndash; you can get get into the livecd chroot environmnet following the %post stage and before squashfs and iso are created.
Let execute livecd-creator with &ldquo;-l&rdquo; parameter:</p>

<pre><code># livecd-creator -l -c centos6-mini.ks --cache=cache -f centos6-mini
</code></pre>

<p>You will be dropped to shell after playbook execution:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>PLAY [post-nochroot] **********************************************************
</span><span class='line'>
</span><span class='line'>TASK: [livecd-isolinux-common | Get CDLABEL from isolinux.cfg] ****************
</span><span class='line'>ok: [127.0.0.1]
</span><span class='line'>
</span><span class='line'>TASK: [livecd-isolinux-common | Deploy modified isolinux.cfg] *****************
</span><span class='line'>changed: [127.0.0.1]
</span><span class='line'>
</span><span class='line'>PLAY RECAP ********************************************************************
</span><span class='line'>/var/tmp/imgcreate-sP_xxo/install_root : ok=10   changed=7    unreachable=0    failed=0
</span><span class='line'>127.0.0.1                  : ok=2    changed=1    unreachable=0    failed=0
</span><span class='line'>
</span><span class='line'>Launching shell. Exit to continue.
</span><span class='line'>----------------------------------
</span><span class='line'>bash-4.1#</span></code></pre></td></tr></table></div></figure>


<p>Open another terminal session and go to livecd-ansible directory. You can modify ansible playbooks directly and rerun playbook as follows:</p>

<pre><code>ansible-playbook -i auto_gen_ansible_hosts-centos6-mini centos6-mini.yml
</code></pre>

<p>This procedure can be repeated as many times as you need till you satisfied with the result. Go back to chroot environment and exit the shell with Ctrl+D.
It will complete the build procedure.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up Time Machine and AFP Shares on Ubuntu with Ansible]]></title>
    <link href="http://GR360RY.github.io/blog/2013/11/16/automating-installation-of-netatalk-3-dot-0-x-with-ansible/"/>
    <updated>2013-11-16T21:20:00+02:00</updated>
    <id>http://GR360RY.github.io/blog/2013/11/16/automating-installation-of-netatalk-3-dot-0-x-with-ansible</id>
    <content type="html"><![CDATA[<p>Recently I wanted to test latest version of netatalk 3.0 on my Ubuntu Box.
Unfortunately the latest binary version available for Ubuntu 12.04 is netatalk 2.2.1 from netatalk 2.X branch.
As a result I came to do a little Ansible playbook that installs Netatalk 3.0.6 automatically.
This article shows how to use Ansible playbook to compile, install and configure Netatalk on your machine or test latest version of Netatalk using Vagrant and VirtualBox for different Linux Distributions.</p>

<!-- more -->


<h3>Installing Requirements and Getting the source</h3>

<p>We need new version of Ansible to perform the installation. Instructions are available below:</p>

<ul>
<li><a href="http://www.ansibleworks.com/docs/intro_installation.html#latest-releases-via-apt-ubuntu">Ubuntu Instructions</a></li>
<li><a href="http://www.ansibleworks.com/docs/intro_installation.html#latest-release-via-yum">CentOS/RedHat and Fedora Instructions</a></li>
<li><a href="http://www.codingspaces.com/2013/07/installing-ansible-on-os-x-via-homebrew.html">OSX Installation using &ldquo;brew&rdquo;</a></li>
</ul>


<p>Get netatalk-ansible playbook from github:</p>

<pre><code>foo@myhost:~$ git clone git@github.com:GR360RY/netatalk-ansible.git
foo@myhost:~$ cd netatalk-ansible
</code></pre>

<h3>Configuring Asible Environment</h3>

<p>If you just want to test the setup with Vagrant &ndash; jump to <a href="#vagrant">Vagrant</a> section.</p>

<p>To be able to install and configure netatalk we will need to have ssh access to the target Linux system ( &ldquo;localhost&rdquo; in case we are doing self provisioning ). This playbook implies that &ldquo;ssh user&rdquo; will also be the owner of the AFP shares. In addition the ssh user need to have sudo privileges on the target system, as some task will require root privileges.</p>

<p>For testing purposes passwordless sudo access can be configured on target system if not available:
Add the below line to <code>/etc/sudoers</code></p>

<pre><code>your_username    ALL=(ALL) NOPASSWD:ALL
</code></pre>

<p>Install sshpass on your client machine:</p>

<p><strong>On RedHat based system:</strong></p>

<pre><code>[foo@centos64 ~]# yum -y install sshpass
</code></pre>

<p><strong>On Debian Based system:</strong></p>

<pre><code>[foo@ubuntu1204 ~] apt-get -y install sshpass
</code></pre>

<p><strong>On OSX:</strong> Compile from source <a href="http://sourceforge.net/projects/sshpass/">http://sourceforge.net/projects/sshpass/</a> ( sshpass is not available in brew)</p>

<p>Add your target system ip ( 127.0.0.1 for self provisioning ) to <code>ansible_hosts</code> as folling:</p>

<figure class='code'><figcaption><span>ansible_hosts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>foo@myhost:~/netatalk-ansible <span class="nv">$ </span>cat ansible_hosts
</span><span class='line'><span class="c"># List of hosts to configure netatalk on</span>
</span><span class='line'><span class="c"># 10.0.0.1</span>
</span><span class='line'><span class="c"># 192.168.0.101</span>
</span><span class='line'><span class="c"># ...</span>
</span><span class='line'>10.0.0.3
</span></code></pre></td></tr></table></div></figure>


<h3>Configure AFP Shares, Time Machine and ssh user</h3>

<ul>
<li>Edit <code>netatalk.yml</code> by changing vagrant user to <strong><em>your_username</em></strong> at line 4</li>
<li>Update <strong><em>shares_list</em></strong> with desired Share Names and correct path.</li>
<li>Edit location of Time Machine Volume</li>
</ul>


<figure class='code'><figcaption><span>netatalk.yml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">all</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">vagrant</span>      <span class="c1"># User to access your machine over ssh that has sudo permittions</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sudo</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yes</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">vars</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Netatalk version and source location path</span>
</span><span class='line'>    <span class="l-Scalar-Plain">netatalk_version</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">netatalk-3.0.6</span>
</span><span class='line'>    <span class="l-Scalar-Plain">source_location</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/usr/local/src</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Dirs below will be created as user running this playbook. </span>
</span><span class='line'>    <span class="c1"># Make permission/ownership change to be able to write to those folders as any other user.</span>
</span><span class='line'>    <span class="c1"># shares_list block can be commented out ( together with below folders ). </span>
</span><span class='line'>    <span class="c1"># In such case only &quot;Time Machine&quot; volume will be configured.</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">shares_list</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">name</span><span class="p-Indicator">:</span> <span class="s">&#39;Shared</span><span class="nv"> </span><span class="s">Data&#39;</span><span class="p-Indicator">,</span> <span class="nv">path</span><span class="p-Indicator">:</span> <span class="s">&#39;/tank/Media&#39;</span> <span class="p-Indicator">}</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">name</span><span class="p-Indicator">:</span> <span class="s">&#39;Downloads&#39;</span><span class="p-Indicator">,</span> <span class="nv">path</span><span class="p-Indicator">:</span> <span class="s">&#39;/tank/Downloads&#39;</span> <span class="p-Indicator">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Time machine volume. Directory permissions are 774. </span>
</span><span class='line'>    <span class="c1"># Make permissions/ownership change to be able to write to this folder as any other then sudo_user user.</span>
</span><span class='line'>    <span class="l-Scalar-Plain">tm_volume</span><span class="p-Indicator">:</span> <span class="p-Indicator">{</span> <span class="nv">name</span><span class="p-Indicator">:</span> <span class="s">&#39;Time</span><span class="nv"> </span><span class="s">Machine&#39;</span><span class="p-Indicator">,</span> <span class="nv">path</span><span class="p-Indicator">:</span> <span class="s">&#39;/tank/TM&#39;</span><span class="p-Indicator">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Copmile, Install and Configure automatically</h3>

<p>The next step will take some time, depending on hardware and network speed.</p>

<p>If passwordless sudo access is configured, run the following command to deploy:</p>

<pre><code>foo@myhost:~/netatalk-ansible $ ansible-playbook -k -i ansible_hosts netatalk.yml
</code></pre>

<p>If not, add &ldquo;-K&rdquo; option:</p>

<pre><code>foo@myhost:~/netatalk-ansible $ ansible-playbook -k -K -i ansible_hosts netatalk.yml
</code></pre>

<p>You should expect the following output:</p>

<pre><code>PLAY [all] ********************************************************************

GATHERING FACTS ***************************************************************
ok: [ubuntu1204]
ubuntu1204: importing /Users/gregs/dev/netatalk-ansible/vars/Debian.yml
ubuntu1204: importing /Users/gregs/dev/netatalk-ansible/vars/Ubuntu.12.04.yml

TASK: [Check current hostname] ************************************************
ok: [ubuntu1204]

TASK: [Update /etc/hostname file] *********************************************
skipping: [ubuntu1204]

TASK: [Update /etc/hosts file] ************************************************
skipping: [ubuntu1204]

TASK: [Change hostname] *******************************************************
skipping: [ubuntu1204]

...
</code></pre>

<h2><em>KNOWN ISSUES:</em></h2>

<p>On Ubuntu 13.04 and 13.10 netatalk service should be started manually after installation.</p>

<h2><a name="vagrant"></a>Testing setup with VirtualBox and Vagrant</h2>

<p>This repository includes Vagrantfile with recent Ubuntu versions that can be tested without playbook modifications.
Currently tested distributions are Ubuntu 12.04, 12.10, 13.04 and 13.10. Vagrant Boxes configuration is available at the top of the <code>Vagrantfile</code>:</p>

<figure class='code'><figcaption><span>Vagrantfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">VAGRANTFILE_API_VERSION</span> <span class="o">=</span> <span class="s2">&quot;2&quot;</span>
</span><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">VAGRANTFILE_API_VERSION</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'><span class="n">machines</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;ubuntu1204&#39;</span><span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;define&#39;</span> <span class="o">=&gt;</span> <span class="ss">:ubuntu1204</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;box&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;precise64&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;url&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;http://files.vagrantup.com/precise64.box&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;ubuntu1204&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s1">&#39;ubuntu1210&#39;</span><span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;define&#39;</span> <span class="o">=&gt;</span> <span class="ss">:ubuntu1210</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;box&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;quantal64&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;url&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;http://goo.gl/wxdwM&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;ubuntu1210&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s1">&#39;ubuntu1304&#39;</span><span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;define&#39;</span> <span class="o">=&gt;</span> <span class="ss">:ubuntu1304</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;box&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;raring64&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;url&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;http://goo.gl/ceHWg&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;ubuntu1304&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s1">&#39;ubuntu1310&#39;</span><span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;define&#39;</span> <span class="o">=&gt;</span> <span class="ss">:ubuntu1310</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;box&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;saucy64&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;url&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;http://cloud-images.ubuntu.com/vagrant/saucy/current/saucy-server-cloudimg-amd64-vagrant-disk1.box&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;ubuntu1310&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Executing <code>vagrant up</code> in repository directory will create and automatically configure all boxes from Vagrantfile.
Specific box can be tested by choosing os type as in the next example:</p>

<pre><code>foo@myhost:~/netatalk-ansible $ vagrant up ubuntu1204
</code></pre>

<blockquote><p>In case you want to make changes to playbook before installation, Netatalk deployment can be skipped using `&#8211;no-provision` option:</p><p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span><br/></pre></td><td class='code'><pre><code class='bash'><span class='line'>foo@myhost:~/netatalk-ansible <span class="nv">$ </span>vagrant up ubuntu1204 --no-provision<br/></span></code></pre></td></tr></table></div></figure></p><p><br/>After changes to playbook are applied, run provisioning with vagrant</p><p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span><br/></pre></td><td class='code'><pre><code class='bash'><span class='line'>foo@myhost:~/netatalk-ansible <span class="nv">$ </span>vagrant provision ubuntu1204<br/></span></code></pre></td></tr></table></div></figure></p></blockquote>


<p>Vagrant provision procedure can be executed as many times as you need &ndash; running provision the second time will take a fraction of the time of first run as all components are already installed.</p>

<p>VMs are configured to use bridged interface as well, so after the installation is completed, you should be able to see new AFP host ( like Ubuntu1204 ) with shared folders in Finder.</p>

<p><img src="http://GR360RY.github.io/images/afp_share.jpg"></p>

<p>Default User and Password: <code>vagrant:vagrant</code></p>

<p><img src="http://GR360RY.github.io/images/user_password.png"></p>

<p>You will be able to access configured afp share:</p>

<p><img src="http://GR360RY.github.io/images/share_names.png"></p>

<h2>Understanding Netatalk Configuration</h2>

<p>The deployment procedure is based on guide provided by <a href="http://netatalk.sourceforge.net/wiki/index.php/Category:Howtos">Netatalk Wiki Howtos</a>.
All setting can be found in the next files generated automatically during installation:</p>

<pre><code>/usr/local/etc/afp.conf
/etc/avahi/services/afpd.service
</code></pre>

<p>Sample /usr/local/etc/afp.conf:</p>

<figure class='code'><figcaption><span>afp.conf </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[Global]</span>
</span><span class='line'><span class="na">log file</span> <span class="o">=</span> <span class="s">/var/log/netatalk.log</span>
</span><span class='line'><span class="na">mimic model</span> <span class="o">=</span> <span class="s">Xserve</span>
</span><span class='line'>
</span><span class='line'><span class="k">[Shared Data]</span>
</span><span class='line'>    <span class="na">path</span> <span class="o">=</span> <span class="s">/tank/Media</span>
</span><span class='line'>
</span><span class='line'><span class="k">[Downloads]</span>
</span><span class='line'>    <span class="na">path</span> <span class="o">=</span> <span class="s">/tank/Downloads</span>
</span><span class='line'>
</span><span class='line'><span class="k">[Time Machine]</span>
</span><span class='line'>    <span class="na">path</span> <span class="o">=</span> <span class="s">/tank/TM</span>
</span><span class='line'><span class="s">    time machine = yes</span>
</span></code></pre></td></tr></table></div></figure>


<p>Those file include only bare minimum configuration for testing purposes. Please read <a href="http://netatalk.sourceforge.net/3.0/htmldocs/">Netatalk Manual</a> to get more info.</p>

<p>Make sure to restart your netatalk and avahi service after new configuration is applied to one of the config files:</p>

<p>Restart Netatalk Daemon:</p>

<pre><code>/etc/init.d/netatalk restart
</code></pre>

<p>Restart avahi-daemon:</p>

<pre><code>/etc/init.d/avahi-daemon restart
</code></pre>

<h2>Appendix:</h2>
]]></content>
  </entry>
  
</feed>
